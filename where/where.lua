-- Standalone version of where() function. Requires a npc database (npcdb.lua) generated by the npcdb/getnpc.sh script
-- Attention: the database can lag a bit. use with some cooldown time or don't use every AI tick (frame)
-- How to use in my AI?
-- Example:
--
-- local where = dofile("where.lua")
-- local mapname = where()
-- if mapname == "ve_fild07" then
--   TraceAI("My master is collecting potatoes...")
-- end

-- Configure here
local PREFIX = "./AI/USER_AI/"
local NPCDB = "npcdb.lua"

-- Private variables
local mapname = nil
local checked_npc = {}

local time_before
local time_cooldown = 0

-- useful functions

-- get actor's information (position and sprite id)
local function getActorInfo(id)
  local actor = {}
  actor.x, actor.y = GetV(1, id) -- 1 = V_POSITION
  actor.job = GetV(7, id) -- 7 = V_JOB
  actor.id = id
  return actor
end

-- get time difference
local function delta()
  local time_now = GetTick()/1000
  local d = time_now-time_before
  time_before = time_now
  return d
end

-- is this actor a homunculus?
local function isHom(id)
  local htype = GetV(7, id)
  return (id >= 100000000 and htype >= 1 and htype <= 16)
end

-- is this actor a NPC?
local function isNPC(id)
  return id >= 100000000 and IsMonster(id) == 0 and not isHom(id)
end

-- look for new NPCs
local function canCheckNPCs()
  local actors = GetActors()
  for i,v in ipairs(actors) do
    if isNPC(v) and not checked_npc[v] then
      return true
    end
  end
  return false
end

-- Ask NPCs what map they are
local function checkNPCs()
  local npcdb = dofile(PREFIX..NPCDB) -- An entire NPC database
  local maps = {}
  local actors = GetActors()
  -- Iterate all NPCs (and some extra stuff)
  for i,v in ipairs(actors) do
    local act = getActorInfo(v)
    if isNPC(act.id) and act.x ~= -1 and not checked_npc(act.id) then
      checked_npc[act.id] = true
      -- Iterate all database (rly?)
      for j,u in pairs(npcdb) do
        -- only npcs that match position and sprite id
        if string.find(j, "[(]".. act.x ..",".. act.y ..",(%d+),".. act.job .."[)]") then
          conflict = conflict + 1
	  map_con = u.map
	  if not maps[u.map] then
	    maps[u.map] = 1
	  else
	    maps[u.map] = maps[u.map] + 1
	  end
	end
      end
      -- no map conflict: the NPC has unique coordinates+sprite
      if conflict == 1  then
        npcdb = nil
	actors = nil
	collectgarbage()
	return map_con
      end
    end
  end
  npcdb = nil
  actors = nil
  collectgarbage()
  -- democracy mode: most popular map among the NPCs wins
  local popular_map = nil
  local votes = 1
  for i,v in pairs(maps) do
    if v > votes then
      votes = v
      popular_map = i
    end
  end
  return popular_map
end

-- main function of this module
local function where(cooldown)
  if mapname then
    return mapname
  end
  -- Cooldown
  if cooldown then
    if not time_before then
      time_before = GetTick()/1000
    end
    time_cooldown = time_cooldown + delta()
    if time_cooldown > cooldown then
      time_cooldown = 0
    end
  end
  if time_cooldown > 0 then
    return nil
  end
  -- NPC check
  if canCheckNPCs() then
    mapname = checkNPCs()
  end
  return mapname
end

return where
